(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{225:function(t,a,s){t.exports=s.p+"assets/img/20191022172607993.56f26a00.png"},300:function(t,a,s){"use strict";s.r(a);var r=s(5),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"虚拟-dom"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom"}},[t._v("#")]),t._v(" 虚拟 DOM")]),t._v(" "),r("h2",{attrs:{id:"virtual-dom-运行过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom-运行过程"}},[t._v("#")]),t._v(" Virtual Dom 运行过程：")]),t._v(" "),r("p",[r("img",{attrs:{src:s(225),alt:"1599408879599.jpg"}})]),t._v(" "),r("ul",[r("li",[t._v("正常的 DOM 节点在 HTML 中是这样的：")])]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("文本内容"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("文本内容"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),r("ul",[r("li",[t._v("用 Virtual Dom 创建的 JavaScript 对象一般会是这样的：")])]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vNode "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    tag"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attributes"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        id"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p节点")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("ul",[r("li",[r("p",[t._v("Virtual Dom 就是通过一种 VNode 类表达的，每个 DOM 元素或组件都对应一个 VNode 对象。")]),t._v(" "),r("p",[t._v("每个 VNode 有 children，children 每个元素也是一个 VNode，这样就形成了一个 VNode Tree，它很好的描述了我们的 DOM Tree。")])])]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VNode")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    tag"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    data"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" VNodeData"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    children"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" VNode"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    text"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    elm"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Node"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ns"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    context"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Vue"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    key"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    componentOptions"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" VNodeComponentOptions"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    componentInstance"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Vue"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    parent"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" VNode"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    raw"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    isStatic"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    isRootInsert"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    isComment"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[t._v("树 diff 的时间复杂度 o(n 的三次 3)\n过程 1 遍历 tree1，第二遍历 tree2 第三排序，这三个循环一组合就是 o(n 的三次 3)")]),t._v(" "),r("p",[t._v("优化时间复杂度到(O(n))")]),t._v(" "),r("ul",[r("li",[t._v("只同级比较，不跨级比较")]),t._v(" "),r("li",[t._v("tag 不相同，直接删掉重建，不再深度比较")]),t._v(" "),r("li",[t._v("tag 和 key，两者都相同，则认为是相同节点，不再深度比较")])]),t._v(" "),r("h2",{attrs:{id:"diff-算法-比较策略-深度优先-同层比较"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#diff-算法-比较策略-深度优先-同层比较"}},[t._v("#")]),t._v(" Diff 算法 比较策略 深度优先，同层比较")]),t._v(" "),r("p",[t._v("snabbdom")]),t._v(" "),r("ul",[r("li",[t._v("相同的 vnode，（key 和 tag 都相同）patch 对比，不同的 vnode 销毁重建")])]),t._v(" "),r("h2",{attrs:{id:"如何理解-vue-中的-diff-算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-vue-中的-diff-算法"}},[t._v("#")]),t._v(" 如何理解 vue 中的 Diff 算法？")]),t._v(" "),r("ul",[r("li",[t._v("diff 算法是虚拟 DOM 技术的必然产物，通过新旧虚拟 DOm 的对比（既 Diff）将变化的地方更新在真实 DOM 上，另外也需要 Diff 高效的执行对比过程，从而降低时间复杂度 O(n).")]),t._v(" "),r("li",[t._v("vue2.x 为了降低 watcher 的颗粒度，每个组件只有一个 watcher，引入 Diff 可以精准找到 DOM 变化的地方。")]),t._v(" "),r("li",[t._v("vue 中 diff 执行时候组件实例执行更新函数时。它会对比上一次渲染结果 oldNode 和新的渲染结果 newNode。此过程称为 patch。")]),t._v(" "),r("li",[t._v("diff 过程深度优先，同层比较。两个节点之间会根据他们是否拥有子节点或者文本节点做不同操作。比较两组子节点是算法的重点。假设头尾节点可能相同做 4 次比对尝试。如果 没有找到相同节点才按照通用方式遍历查找。查找结束在按情况处理剩下节点，借助 key 通常可以精准的找到相同节点，因此整个 patch 过程很高效。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);