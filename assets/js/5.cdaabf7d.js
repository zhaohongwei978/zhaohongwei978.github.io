(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{186:function(t,n,a){t.exports=a.p+"assets/img/WX20200914-234458@2x.eda50cf6.png"},187:function(t,n,a){t.exports=a.p+"assets/img/WX20200914-234528@2x.743205df.png"},223:function(t,n,a){"use strict";a.r(n);var e=a(5),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),e("h2",{attrs:{id:"值类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#值类型"}},[t._v("#")]),t._v(" 值类型")]),t._v(" "),e("ul",[e("li",[t._v("let a;//underfind (const 的定义的常量必须有初始值)")]),t._v(" "),e("li",[t._v("const a = '' //string")]),t._v(" "),e("li",[t._v("const a= 1 //number")]),t._v(" "),e("li",[t._v("const a = true //boolean")]),t._v(" "),e("li",[t._v("const a = Symbal('s')")])]),t._v(" "),e("h2",{attrs:{id:"引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[t._v("#")]),t._v(" 引用类型")]),t._v(" "),e("ul",[e("li",[t._v("数组")]),t._v(" "),e("li",[t._v("对象")]),t._v(" "),e("li",[t._v("null")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let a = 100\nlet b = a\na =200\nconsole.log(b) // 100\n")])])]),e("p",[t._v("值在栈中存储。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(186),alt:"QQ截图20200128111606.png"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let a = {age:20}\nlet b = a\na.age = 21\nconsole.log(b) // {age:21}\n")])])]),e("p",[t._v("引用类型，变量在栈中存储，对应的值存储的是引用地址，引用的值存储在堆中。\n值在栈中存储。\n"),e("img",{attrs:{src:a(187),alt:"QQ截图20200128111606.png"}})]),t._v(" "),e("h2",{attrs:{id:"为什么设计引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么设计引用类型"}},[t._v("#")]),t._v(" 为什么设计引用类型？")]),t._v(" "),e("p",[t._v("性能和存储的问题，值类型占用空间小，可以存在栈中。引用类型数据大，存在栈中不好管理。如果复制栈中的对象会很慢。")]),t._v(" "),e("h2",{attrs:{id:"typeof-运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符"}},[t._v("#")]),t._v(" typeof 运算符")]),t._v(" "),e("p",[t._v("可以判断的类型 可以识别所有值类型\nunderfind string number boolean symbal\n判断函数\ntypeof funcation a(){} // function")]),t._v(" "),e("h2",{attrs:{id:"深拷贝实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝实现"}},[t._v("#")]),t._v(" 深拷贝实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function deepClone(json = {}) {\n    if(typeof  json !== 'object'||json == null){\n        return json;\n    }\n    let result;\n    if(json instanceof Array){\n        result = []\n    }else{\n        result = {}\n    }\n    for(let key in json){\n        //保证key是json自身的属性\n        if(json.hasOwnProperty(key)){\n            result[key] = deepClone(json[key])\n        }\n    }\n\n    return  result;\n}\n\n")])])]),e("h2",{attrs:{id:"判断是引式类型的几种方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断是引式类型的几种方法"}},[t._v("#")]),t._v(" 判断是引式类型的几种方法")]),t._v(" "),e("ul",[e("li",[t._v("Object.prototype.toString.call()\nObject.prototype.toString.call([]) //[object Array]\nObject.prototype.toString.call({}) //[object Object]\nObject.prototype.toString.call(function(){}) //[object Function]")]),t._v(" "),e("li",[t._v("Array.isArray")])]),t._v(" "),e("h2",{attrs:{id:"instanceof-实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-实现"}},[t._v("#")]),t._v(" instanceof 实现")]),t._v(" "),e("p",[t._v("寻找左边的对象的原型链中是否存在右边对象的原型对象。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function instanceof(left,right) {\n    let l = left.__proto__;\n    let r = right.prototype;\n    while (true){\n        if(l === null){\n            return false;\n        }\n        if(l === r){\n            return  true;\n        }\n        l = r.__proto__;\n    }\n\n}\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);