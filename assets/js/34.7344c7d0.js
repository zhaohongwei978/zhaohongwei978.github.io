(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{243:function(t,e,n){"use strict";n.r(e);var a=n(5),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"new-vue-时候都做了什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-vue-时候都做了什么"}},[t._v("#")]),t._v(" new Vue 时候都做了什么？")]),t._v(" "),n("p",[t._v("Vue 初始化主要就干了几件事情，合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化 data、props、computed、watcher 等等。")]),t._v(" "),n("ul",[n("li",[t._v("实际上是执行了 init 方法完成初始化的工作，完成 options 的合并和一些初始化方法。")]),t._v(" "),n("li",[t._v("options 合并主要是把 props menthods 和 data 都合并到 options 对象上。")]),t._v(" "),n("li",[t._v("数据代理 proxy（主要访问属性 key，实际访问的是 this._data.key）")]),t._v(" "),n("li",[t._v("数据的初始化主要是 observe 的过程")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//vue初始化state\nexport function initState (vm: Component) {\n  vm._watchers = []\n  const opts = vm.$options\n  if (opts.props) initProps(vm, opts.props)//判断是否有props\n  if (opts.methods) initMethods(vm, opts.methods)//判断是否有methods\n  if (opts.data) {\n    initData(vm)//判断是否有data，若有初始化data\n  } else {\n    observe(vm._data = {}, true /* asRootData */)\n  }\n  if (opts.computed) initComputed(vm, opts.computed)\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("//初始化data\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {}\n  if (!isPlainObject(data)) {\n    data = {}\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    )\n  }\n  // proxy data on instance\n  const keys = Object.keys(data)\n  const props = vm.$options.props\n  const methods = vm.$options.methods\n  let i = keys.length\n  while (i--) {\n    const key = keys[i]\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          `Method \"${key}\" has already been defined as a data property.`,\n          vm\n        )\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        `The data property \"${key}\" is already declared as a prop. ` +\n        `Use prop default value instead.`,\n        vm\n      )\n    } else if (!isReserved(key)) {\n      proxy(vm, `_data`, key)\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */) //主要完成数据的响应化\n}\n\n")])])]),n("p",[t._v("proxy 主要是对属性的代理 当我们访问 this.title 时，实际上访问的是 this._data.title.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export function proxy (target: Object, sourceKey: string, key: string) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  }\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("vm._self = vm\ninitLifecycle(vm)\ninitEvents(vm)\ninitRender(vm)\ncallHook(vm, 'beforeCreate')\ninitInjections(vm) // resolve injections before data/props\ninitState(vm)\ninitProvide(vm) // resolve provide after data/props\ncallHook(vm, 'created')\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);