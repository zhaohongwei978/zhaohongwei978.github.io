(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{189:function(t,a,e){t.exports=e.p+"assets/img/http_huancun.9b9d8560.jpg"},234:function(t,a,e){"use strict";e.r(a);var s=e(5),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),s("h2",{attrs:{id:"强制缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),s("h3",{attrs:{id:"强缓存过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存过程"}},[t._v("#")]),t._v(" 强缓存过程")]),t._v(" "),s("ul",[s("li",[t._v("1 初次请求，后端 返回资源 和Cache-Control\nCache-Control: max-age=315360000")]),t._v(" "),s("li",[t._v("2 再次请求，判断是否Cache-Control")]),t._v(" "),s("li",[t._v("3 如果缓存失效，重新返回Cache-Control")])]),t._v(" "),s("h3",{attrs:{id:"cache-control"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),s("p",[t._v("Cache-Control === Expires，Expires已经被Cache-Control取代了。")]),t._v(" "),s("ul",[s("li",[t._v("1 max-age过期时间")]),t._v(" "),s("li",[t._v("2 no-cache不用强制缓存,服务端怎么处理缓存不管。")]),t._v(" "),s("li",[t._v("3 no-store不用本地缓存，并且不让服务端做缓存。")])]),t._v(" "),s("h2",{attrs:{id:"协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),s("p",[t._v("服务端缓存策略，服务端判断是否需要缓存。")]),t._v(" "),s("p",[t._v("服务端判断客户端资源，是否和服务端资源一样。一致返回304，否则返回200和最新资源。")]),t._v(" "),s("h3",{attrs:{id:"协商过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商过程"}},[t._v("#")]),t._v(" 协商过程")]),t._v(" "),s("ul",[s("li",[t._v("1客户端初次请求，服务端返回 资源 和Last-modified或者Etag")]),t._v(" "),s("li",[t._v("2再次请求Request Headers中携带 if-Modified-Since：客户端缓存起来的时间 （Last-modified） 或者 if-None-Match:浏览器缓存的etag")]),t._v(" "),s("li",[t._v("3返回304或者，返回资源和新的Last-modified 或者新的Tag")])]),t._v(" "),s("h3",{attrs:{id:"etag比if-modified-since的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#etag比if-modified-since的优势"}},[t._v("#")]),t._v(" Etag比if-Modified-Since的优势？")]),t._v(" "),s("p",[t._v("Etag指纹，由服务端生成，通过Etag比较文件是否需要缓存，在高精度下更准确。\n某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)。")]),t._v(" "),s("h3",{attrs:{id:"计算整个文件得到etag会耗费性能-怎么解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算整个文件得到etag会耗费性能-怎么解决"}},[t._v("#")]),t._v(" 计算整个文件得到etag会耗费性能，怎么解决？")]),t._v(" "),s("p",[t._v("Etag分为强Etag 和 若 Etag是根据服务器配置文件生成的。\n一些文件")]),t._v(" "),s("h3",{attrs:{id:"协商缓存资源标识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存资源标识"}},[t._v("#")]),t._v(" 协商缓存资源标识")]),t._v(" "),s("ul",[s("li",[t._v("Last-Modified资源的最后修改时间")]),t._v(" "),s("li",[t._v("Etag资源唯一标识（字符串类似指纹）")])]),t._v(" "),s("p",[t._v("浏览器缓存了解吗？强缓存一般存放在哪里？计算整个文件得到etag会耗费性能，怎么解决？\n如果我不想要使用缓存了，每次都请求最新的，怎么做？no-store和no-cache的区别是什么？\n浏览器缓存说一下？\n301、302、403的含义")]),t._v(" "),s("h2",{attrs:{id:"浏览器缓存过程图解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存过程图解"}},[t._v("#")]),t._v(" 浏览器缓存过程图解")]),t._v(" "),s("p",[s("img",{attrs:{src:e(189),alt:"1599408879599.jpg"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);