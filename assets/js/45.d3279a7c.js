(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{254:function(n,e,t){"use strict";t.r(e);var a=t(5),l=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"如何自己实现v-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何自己实现v-model"}},[n._v("#")]),n._v(" 如何自己实现v-model")]),n._v(" "),t("h2",{attrs:{id:"实现一个v-model双向数据绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个v-model双向数据绑定"}},[n._v("#")]),n._v(" 实现一个v-model双向数据绑定")]),n._v(" "),t("p",[n._v("父组件如果给子组件传了v-model,子组件默认可以通过value来接收到父组件的属性值，如果不使用value可以通过自定义的model来实现。")]),n._v(" "),t("div",{staticClass:"language-$xslt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//父组件\n<template>\n  <div id=\"app\">\n    <input type=\"text\" v-model=\"val\">\n    <CustomModel v-model=\"val\" @onChange=onChange />\n  </div>\n</template>\n\n<script>\nimport CustomModel from './components/CustomModel.vue'\n\nexport default {\n  name: 'App',\n components: {\n    CustomModel\n  },\n  data(){\n   return{\n      val:'10'  \n   }\n  },\n  methods:{\n    onChange(val){\n      console.log('父组件的值',val)\n      this.val = val\n    }\n  },\n}\n<\/script>\n")])])]),t("div",{staticClass:"language-$xslt extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("//子组件\n<template>\n  <div>\n    <input type=\"text\" :value=\"aa\" @input=\"change\" />\n  </div>\n</template>\n<script>\nexport default {\n    //使用自定义的model\n    model:{\n        prop:'aa',\n        event:'change'\n    },\n    //如果不使用自定义的model，可以使用 props:{ value:String }\n  props: {\n    aa: String,\n  },\n  methods: {\n    change(event) {\n      this.$emit('onChange',event.target.value)\n    },\n  },\n};\n<\/script>\n")])])])])}),[],!1,null,null,null);e.default=l.exports}}]);