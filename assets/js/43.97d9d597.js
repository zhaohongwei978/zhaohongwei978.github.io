(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{236:function(t,a,s){"use strict";s.r(a);var e=s(5),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"组件通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[t._v("#")]),t._v(" 组件通信")]),t._v(" "),s("p",[t._v("组件通信常用方式")]),t._v(" "),s("ul",[s("li",[t._v("props")]),t._v(" "),s("li",[t._v("eventBus")]),t._v(" "),s("li",[t._v("vuex")]),t._v(" "),s("li",[t._v("自定义事件（接收props）")])]),t._v(" "),s("p",[t._v("边界情况")]),t._v(" "),s("ul",[s("li",[t._v("$parent")]),t._v(" "),s("li",[t._v("$children")]),t._v(" "),s("li",[t._v("$root")]),t._v(" "),s("li",[t._v("$refs")]),t._v(" "),s("li",[t._v("provide/inject")]),t._v(" "),s("li",[t._v("attrs")]),t._v(" "),s("li",[t._v("listeners")])]),t._v(" "),s("h2",{attrs:{id:"props父组件给子组件传值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props父组件给子组件传值"}},[t._v("#")]),t._v(" props父组件给子组件传值")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('//parent \n<Hello :msg="hello"></Hello>\n//child\nprops:{\n    msg:string\n}\n\n')])])]),s("h2",{attrs:{id:"父子组件通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#父子组件通信"}},[t._v("#")]),t._v(" 父子组件通信")]),t._v(" "),s("p",[t._v("子组件emit，在父组件中通过自定义事件接收子组件的emit触发，")]),t._v(" "),s("p",[t._v("注意：父子组件通信 是在子组件中触发，在子组件中监听。")]),t._v(" "),s("h2",{attrs:{id:"eventbus事件总线实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eventbus事件总线实现"}},[t._v("#")]),t._v(" eventBus事件总线实现")]),t._v(" "),s("p",[t._v("事件总线实现思路，发布订阅模式 $on $emit $off")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Bus {\n    constructor(){\n    this.callbacks = {}\n    }\n    $on(name, fn){\n        this.callbacks[name] = this.callbacks[name] || []\n        this.callbacks[name].push(fn)\n    }\n    $emit(name, args){\n        if(this.callbacks[name]){\n            this.callbacks[name].forEach(cb => cb(args))\n        }\n    }\n}\n//使用\n// main.js\nVue.prototype.$bus = new Bus()\n// child1\nthis.$bus.$on('foo', handle)\n// child2\nthis.$bus.$emit('foo')\n")])])]),s("h2",{attrs:{id:"parent-root"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parent-root"}},[t._v("#")]),t._v(" $parent/$root")]),t._v(" "),s("p",[t._v("兄弟组件之间通信可通过共同父辈搭桥和evenBus事件总线类似，事件的派发者和监听者必须是同一个。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("this.$parent.$on('test',fn)\nthis.$parent.$emit('test')\n")])])]),s("h2",{attrs:{id:"children"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#children"}},[t._v("#")]),t._v(" $children")]),t._v(" "),s("p",[t._v("父组件可以通过$children访问子组件实例实现父子组件通信")]),t._v(" "),s("p",[t._v("$children不能保证子元素顺序，（如果某一个组件是异步组件，那么$children子元素的顺序是不确定的）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("this.$children[0].xx == 'xxx'\n")])])]),s("h2",{attrs:{id:"attrs的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#attrs的使用"}},[t._v("#")]),t._v(" $attrs的使用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('//父组件中\n<Children :msg="111"/>\n\n//子组件\n如果子组件不同props接收，父组件传过来的msg，那么msg就会把收纳到$attrs中 $attrs中数据内容 {"msg": 111 }\n')])])]),s("h2",{attrs:{id:"refs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#refs"}},[t._v("#")]),t._v(" refs")]),t._v(" "),s("p",[t._v("获取子节点的引用。还可以获取DOM元素")]),t._v(" "),s("h2",{attrs:{id:"provide-inject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject"}},[t._v("#")]),t._v(" provide/inject")]),t._v(" "),s("p",[t._v("祖辈组件之间传值")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//祖辈组件\nprovide(){\n    return {hello :\"111\"}\n}\n//子组件\ninject:['hello']\n")])])]),s("h2",{attrs:{id:"插槽"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插槽"}},[t._v("#")]),t._v(" 插槽")]),t._v(" "),s("ul",[s("li",[t._v("匿名插槽")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//父组件 \n<Hello>123</Hello>\n\n//子组件\n<template>\n    <solt></solt> //展示123\n</temaplate>\n")])])]),s("ul",[s("li",[t._v("具名插槽，即指定名字的插槽")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('//父组件\n<Hello>\n    <solt name="header">111</solt>\n</Hello>\n//子组件\n<template v-slot:header></template>\n')])])]),s("ul",[s("li",[t._v("作用域插槽\n分发内容用到子组件的数据")])])])}),[],!1,null,null,null);a.default=r.exports}}]);