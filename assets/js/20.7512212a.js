(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{233:function(e,t,a){"use strict";a.r(t);var i=a(5),r=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"jsbridge通信过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsbridge通信过程"}},[e._v("#")]),e._v(" JSBridge通信过程")]),e._v(" "),a("p",[e._v("JSBridge 就是JavaScript(H5)与Native通信的桥梁，在H5开发中经常有操作Native的需求，Native(安卓 ISO window...)过JSBridge与Native通信，赋予了JavaScript操作Native的能力，同时也给了Native调用JavaScript的能力。")]),e._v(" "),a("h2",{attrs:{id:"android端开启bridge关键代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#android端开启bridge关键代码"}},[e._v("#")]),e._v(" android端开启bridge关键代码")]),e._v(" "),a("div",{staticClass:"language-angular2html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@SuppressLint("SetJavaScriptEnabled")\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        webView = findViewById(R.id.loginWebView);\n        webView.getSettings().setJavaScriptEnabled(true);\n        // JS注入,此时AppBridge就代表了当前bridge对象，可以通过 AppBridge 访问到native中的方法。\n        webView.addJavascriptInterface(new InjectNativeObject(this), "AppBridge");\n        webView.loadUrl(String.format("http://%s:3000/login_webview", host)); // 加载Webview\n    }\n\nclass InjectNativeObject{\n\n    public InjectNativeObject(){\n    \n    }\n    //安全机制注解，防止攻击者去篡改宿主应用程序\n    @JavascriptInterface\n    public void showToast(Object obj){\n    }\n}\n\n通过 AppBridge对象，就可以调用到 showToast()方法.\n')])])]),a("h2",{attrs:{id:"在前端bridge调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在前端bridge调用"}},[e._v("#")]),e._v(" 在前端bridge调用")]),e._v(" "),a("ul",[a("li",[e._v("第一种就是 Native内嵌的H5可以获取到一个全局对象AppBridge。通过该对象就可以调用到Native上对象绑定的方法。")]),e._v(" "),a("li",[e._v("第二种即 "),a("strong",[a("font",{attrs:{color:"red"}},[e._v(" Android端通过shouldOverrideUrlLoading  ")])],1),e._v(" 拦截URL Schema")])]),e._v(" "),a("div",{staticClass:"language-angular2html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 注入的对象\nwindow.AppBridge = AppBridge || {}; \n\n// 登录按钮点击，调用注入的openNewPage方法，并传入相应的值\nloginButton.addEventListener(\"click\", function (e) {\n    window.AppBridge.showToast('我调用了bridge');\n}, false);\n")])])]),a("h2",{attrs:{id:"拦截url-schema"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截url-schema"}},[e._v("#")]),e._v(" 拦截URL Schema")]),e._v(" "),a("p",[e._v("H5端通过iframe.src或location.href发送Url Schema请求，之后Native（Android端通过shouldOverrideUrlLoading()方法）拦截到请求的Url Schema（包括参数等）进行相应的操作。")]),e._v(" "),a("p",[e._v("H5通过发送一个url请求，Native拦截到请求。客户端可以通过schema来区分是JSBridge调用还是普通的https请求从而做不同的处理。")]),e._v(" "),a("p",[e._v("url可以是：")]),e._v(" "),a("ul",[a("li",[e._v("http:www.baidu.com 正常的url请求 交给webview对象处理。")]),e._v(" "),a("li",[e._v("AppBridge://showToast/?data={} bridge请求，通过AppBridge调用native的方法。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);