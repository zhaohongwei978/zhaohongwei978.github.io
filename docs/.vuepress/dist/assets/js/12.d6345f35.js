(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{197:function(n,a,e){"use strict";e.r(a);var t=e(5),s=Object(t.a)({},(function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[n._v("#")]),n._v(" promise")]),n._v(" "),e("p",[n._v("promise 只有在padding状态才能改变状态，一旦promise的状态被改变就不可以在改变。")]),n._v(" "),e("h2",{attrs:{id:"then-和-catch-改变状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#then-和-catch-改变状态"}},[n._v("#")]),n._v(" then 和 catch 改变状态")]),n._v(" "),e("ul",[e("li",[n._v("then 正常返回 resolved，里面有报错则返回 rejected。")]),n._v(" "),e("li",[n._v("catch 正常返回 resolved, 里面有报错则返回 rejected。")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\nconst p2 = Promise.resolve().then(()=>{\n    throw new Error('error') //会返回rejectred的promise，之后的回调是then\n});\n\n\nconst p3 = Promise.reject('111').catch(()=>{\n    console.log('catch');// reject执行完调用catch，catch会返回一个成功的promise，之后可以调用 then\n}).then(()=>{\n    console.log('111')//\n})\n\n//打印结果 1  2 3\nPromise.resolve().then(()=>{\n    console.log(1);\n    throw new Error('error')\n}).catch(()=>{\n    console.log(2); // catch之后会返回一个成功的promise\n}).then(()=>{\n    console.log(3);\n})\n\n")])])]),e("h2",{attrs:{id:"async-await-和-promise的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-await-和-promise的关系"}},[n._v("#")]),n._v(" async /await 和 Promise的关系")]),n._v(" "),e("ul",[e("li",[n._v("执行async函数，返回的是Promise对象")]),n._v(" "),e("li",[n._v("await 相当于 Promise的then")]),n._v(" "),e("li",[n._v("try...catch可以捕获异常,代替来Promise.catch")]),n._v(" "),e("li",[n._v("await后面的内容都是异步的内容")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//执行aysnc函数,返回的是Promise对象\nasync function  fn1() {\n    return  100; //相当于return Promise.resolve(100);\n}\nconst res = fn1();\nres.then((val)=>{\n   console.log(val)\n});\n\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("async function fn2(){\n    const data = await Promise.resolve(3000)\n    console.log(data) // 可以打印出300，await相当于 Promise.then的回调\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("async function fn2(){\n    const data = await 3000 //相当于Promise.resolve(3000)\n    console.log(data) // 可以打印出300，await相当于 Promise.then的回调\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//try catch 相当于 Promise的catch\n\nasync function fn3){\n    try{\n        const res = await Promise.reject('error')\n    }catch{\n        console.log(res)\n    }\n\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("async function fn4{\n    const res = await Promise.reject('error');\n    console.log(res);// 此时的res不会被执行，因为await相当于Promise的then，当reject 时候会执行catch不会执行then，所以此时必须要通过try catch 捕获。\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("async function async1(){\n    console.log('fn start')\n    await async2()\n    //await后面当作异步代码来执行\n    console.log('fn end')\n}\n\nconsole.log('script start');\nasync1()\nconsole.log('script end');\n\nasync function async2(){\n    console.log('async2')\n}\n打印顺序 \nscript start\nfn start\nasync2\nscript end\nfn end\n\n")])])]),e("h3",{attrs:{id:"场景题分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#场景题分析"}},[n._v("#")]),n._v(" 场景题分析")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("async function fn(){\n    return 100\n}\n\n(async function(){\n    const a  = fn();//a的值为 Promise.resolve(100)\n    const b  = await fn();// b的值为100，await是promise.resolve的回调\n})()    \n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("(async function(){\n    console.log('start')\n    const a = await 100\n    console.log(a) // a的值为100 \n    const b = await Promise.resolve(200)\n    console.log(b) // b的值为200\n    const c = await Promise.reject(300) //此时会报错因为c是 Promise.resolve()的回调，此时拿不到reject的值，需要使用try catch不然报错。执行不下去了\n    console.log(c) \n})()\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);